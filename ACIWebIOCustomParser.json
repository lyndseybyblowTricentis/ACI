/**
 * call source: delivery script from CI Tool (Jenkins, Bamboo, TeamCity, CircleCI, etc), Launch, locally executed
 *              see 'delivery' subdirectory in this repository
 * payload example:
 * {
 *   properties: 'example value'
 *   arrayOfItems: [ { <properties and example values> } ]
 * }
 * constants:
 * - QTEST_TOKEN: 84d46c6a-d39d-11e9-bb65-2a2ae2dbcce4
 * outputs:
 * - The unformatted items in the payload will be formatted into qTest test case
 * - The test cases then will be added to qTest project
 * - The unformatted result will be sent to the trigger "TriggerName"
 * - The ChatOps channel (if there is any) will notificate the result or error
 *
 * qTest has:
 *    Failed
 *    Incomplete
 *    Blocked
 *    Passed
 *    Unexecuted
 */

const { Webhooks } = require('@qasymphony/pulse-sdk');

exports.handler = function ({ event: body, constants, triggers }, context, callback) {
    function emitEvent(name, payload) {
      let t = triggers.find(t => t.name === name);
      return t && new Webhooks().invoke(t, payload);
    }

    // Payload to be passed in: json style WebIO for java test results

    /////// Pulse version
    var payload = body;
    var projectId = payload.projectId;
    var cycleId = payload.testcycle;

    let testResults = JSON.parse(Buffer.from(payload.result, 'base64').toString('ascii'));

    var testLogs = [];
    var reportingLog = [];

    console.log("TEST RESULTS: " + testResults);

    emitEvent('ChatOpsEvent', { TESTRESULTS: testResults });

    testResults.forEach(function (item) {   /* testCase = Result file "item"  */

	    //stepNames.push(item.uid);

	    var status = item.status;
      var actual = item.uid;

      if (status == "passed") {
        TCStatus = "Passed";
      }
      if (status == "skipped") {
	      TCStatus = "Incomplete";
  	    //actual = step.result.error_message;
      }
      if (status == "failed") {
        TCStatus = "Failed";
        actual = step.result.error_message;
	    }	
		
	    if (status == "broken") {
        TCStatus = "Failed";
        // actual = step.result.error_message;
	    }
      
      if (status == "incomplete") {
       	TCStatus = "Incomplete";
      //}
	    
      //if (status == "pending") {
       	//TCStatus = "Incomplete";
       	//emitEvent('ChatOpsEvent', { message: "Step result not found: " + step.name + "; marking as incomplete." });
 	    };

	  // TCStatus = "Passed";

	  //var reportingLog = {
      //reportingLog.start = item.time.start, // TODO These could be passed in
      //reportingLog.stop = item.time.stop,
      reportingLog.name = item.uid,
      reportingLog.status = TCStatus,
      reportingLog.statusDetails = item.statusDetails
	  },

	  testLogs.push(reportingLog);

    var formattedResults = {
        "projectId": projectId,
        "testcycle": cycleId,
        "logs": testLogs
    };

    emitEvent('UpdateQTestWithFormattedResults', formattedResults);

}
