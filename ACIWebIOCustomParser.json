{"constants":[{"id":"constant-1","name":"ManagerURL","hidden":false,"value":""},{"id":"constant-2","name":"QTEST_TOKEN","hidden":false,"value":""},{"id":"constant-3","name":"TeamsWebHook","hidden":false,"value":""}],"actions":[{"id":"action-1","name":"MSTeamsMessage","description":null,"code":"/**\n * trigger name: ChatOpsEvent\n * call source: other Pulse Actions via emitEvent()\n * payload example:\n *   {\n *     \"message\": \"insert message contents here\"\n *   }\n * constants example:\n *  ChatOpsWebhook: 84d46c6a-d39d-11e9-bb65-2a2ae2dbcce4\n * outputs:\n * - the \"message\" object in the payload will be sent to a configured Microsoft Teams webhook\n * prerequisites: configured webhook connector for Microsoft Teams\n * external documentation: https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/connectors/connectors-using\n */\n\nexports.handler = function ({ event: body, constants, triggers }, context, callback) {\n    var str = body;\n    //console.log(str.message);\n\n    var request = require('request');\n    var teams_webhook = constants.TeamsWebHook;\n\n    //console.log('About to request MS Teams webhook: ', teams_webhook);\n\n    request({\n        uri: teams_webhook,\n        method: 'POST',\n        json: { \"text\": str.message }\n    }, function (error, response, body) { }\n    );\n}"},{"id":"action-2","name":"UpdateQTestWithResults","description":null,"code":"const request = require('request');\nconst { Webhooks } = require('@qasymphony/pulse-sdk');\nconst ScenarioSdk = require('@qasymphony/scenario-sdk');\n\nconst Features = {\n    getIssueLinkByFeatureName(qtestToken, scenarioProjectId, name) {\n        return new ScenarioSdk.Features({ qtestToken, scenarioProjectId }).getFeatures(`\"${name}\"`);\n    }\n};\n\nexports.handler = function ({ event: body, constants, triggers }, context, callback) {\n    function emitEvent(name, payload) {\n        let t = triggers.find(t => t.name === name);\n        return t && new Webhooks().invoke(t, payload);\n    }\n\n    // Specific to pulse actions\n    var payload = body;\n\n    var testLogs = payload.logs;\n    var cycleId = payload.testcycle;\n    var projectId = payload.projectId;\n    var requiresDecode = payload.requiresDecode;\n\n    if(requiresDecode == 'true') {\n        testLogs = JSON.parse(testLogs);\n    }\n\n    var scenarioCount = 0;\n    var scenarioList = \"\";\n\n    var standardHeaders = {\n        'Content-Type': 'application/json',\n        'Authorization': `bearer ${constants.QTEST_TOKEN}`\n    }\n\n    var createLogsAndTCs = function () {\n        var opts = {\n            url: \"http://\" + constants.ManagerURL + \"/api/v3/projects/\" + projectId + \"/auto-test-logs?type=automation\",\n            json: true,\n            headers: standardHeaders,\n            body: {\n                test_cycle: cycleId,\n                test_logs: testLogs\n            }\n        };\n\n        return request.post(opts, function (err, response, resbody) {\n\n            if (err) {\n                Promise.reject(err);\n            }\n            else {\n                emitEvent('ChatOpsEvent', { message: resbody });\n\n                if (response.body.type == \"AUTOMATION_TEST_LOG\") {\n                    Promise.resolve(\"Uploaded results successfully\");\n                }\n                else {\n                    emitEvent('ChatOpsEvent', { message: \"Wrong type\" });\n                    Promise.reject(\"Unable to upload test results\");\n                }\n            }\n        });\n    };\n\n    createLogsAndTCs()\n        .on('response', function () {\n            console.log(\"About to call Link Requirements Rule\")\n            emitEvent('<INSERT NAME OF LINK SCENARIO REQUIREMENTS RULE HERE>', payload);\n        })\n        .on('error', function (err) {\n            emitEvent('ChatOpsEvent', { message: err });\n        })\n}"},{"id":"action-3","name":"FormatJavaCucumberJSON","description":null,"code":"/**\n * call source: delivery script from CI Tool (Jenkins, Bamboo, TeamCity, CircleCI, etc), Launch, locally executed\n *              see 'delivery' subdirectory in this repository\n * payload example:\n * {\n *   properties: 'example value'\n *   arrayOfItems: [ { <properties and example values> } ]\n * }\n * constants:\n * - SCENARIO_PROJECT_ID: 84d46c6a-d39d-11e9-bb65-2a2ae2dbcce4\n * - QTEST_TOKEN: 84d46c6a-d39d-11e9-bb65-2a2ae2dbcce4\n * outputs:\n * - The unformatted items in the payload will be formatted into qTest test case\n * - The test cases then will be added to qTest project\n * - The unformatted result will be sent to the trigger \"TriggerName\"\n * - The ChatOps channel (if there is any) will notificate the result or error\n */\n\nconst { Webhooks } = require('@qasymphony/pulse-sdk');\n\nexports.handler = function ({ event: body, constants, triggers }, context, callback) {\n    function emitEvent(name, payload) {\n        let t = triggers.find(t => t.name === name);\n        return t && new Webhooks().invoke(t, payload);\n    }\n\n    // Payload to be passed in: json style cucumber for java test results\n\n    /////// Pulse version\n    var payload = body;\n    var projectId = payload.projectId;\n    var cycleId = payload.testcycle;\n\n    let testResults = JSON.parse(Buffer.from(payload.result, 'base64').toString('ascii'));\n\n    var testLogs = [];\n    //console.log(\"TEST RESULTS: \" + testResults);\n\n    //emitEvent('ChatOpsEvent', { TESTRESULTS: testResults });\n\n    testResults.forEach(function (feature) {\n        var featureName = feature.name;\n        feature.elements.forEach(function (testCase) {\n\n            if (!testCase.name)\n                testCase.name = \"Unnamed\";\n\n            TCStatus = \"passed\";\n\n            var reportingLog = {\n                exe_start_date: new Date(), // TODO These could be passed in\n                exe_end_date: new Date(),\n                module_names: [\n                    featureName\n                ],\n                name: testCase.name,\n                automation_content: feature.uri + \"#\" + testCase.name\n            };\n\n            var testStepLogs = [];\n            order = 0;\n            stepNames = [];\n            attachments = [];\n\n            testCase.steps.forEach(function (step) {\n                stepNames.push(step.name);\n\n                var status = step.result.status;\n                var actual = step.name;\n\n                if (TCStatus == \"passed\" && status == \"skipped\") {\n                    TCStatus = \"skipped\";\n                }\n                if (status == \"failed\") {\n                    TCStatus = \"failed\";\n                    actual = step.result.error_message;\n                }\n                if (status == \"undefined\") {\n                    TCStatus = \"incomplete\";\n                    status = \"incomplete\";                    \n                    emitEvent('ChatOpsEvent', { message: \"Step result not found: \" + step.name + \"; marking as incomplete.\" });\n                }\n\n                // Are there an attachment for this step?\n                if (\"embeddings\" in step) {\n                    console.log(\"Has attachment\");\n\n                    attCount = 0;\n                    step.embeddings.forEach(function (att) {\n                        attCount++;\n                        var attachment = {\n                            name: step.name + \" Attachment \" + attCount,\n                            \"content_type\": att.mime_type,\n                            data: att.data\n                        };\n                        console.log(\"Attachment: \" + attachment.name)\n\n                        attachments.push(attachment);\n                    });\n                }\n\n                var expected = step.keyword + \" \" + step.name;\n\n                if (\"location\" in step.match) {\n                    expected = step.match.location;\n                }\n\n                var stepLog = {\n                    order: order,\n                    description: step.keyword + ' ' + step.name,\n                    expected_result: step.name,\n                    actual_result: actual,\n                    status: status\n                };\n\n                testStepLogs.push(stepLog);\n                order++;\n            });\n\n            reportingLog.attachments = attachments;\n            reportingLog.description = stepNames.join(\"<br/>\");\n            reportingLog.status = TCStatus;\n            reportingLog.test_step_logs = testStepLogs;\n            reportingLog.featureName = featureName;\n            testLogs.push(reportingLog);\n        });\n    });\n\n    var formattedResults = {\n        \"projectId\": projectId,\n        \"testcycle\": cycleId,\n        \"logs\": testLogs\n    };\n\n    emitEvent('UpdateQTestWithFormattedResults', formattedResults);\n\n}"},{"id":"action-4","name":"FormatJUnitXML","description":null,"code":"const PulseSdk = require('@qasymphony/pulse-sdk');\nconst request = require('request');\nconst xml2js = require('xml2js');\nconst { Webhooks } = require('@qasymphony/pulse-sdk');\n\nexports.handler = function ({ event: body, constants, triggers }, context, callback) {\n    function emitEvent(name, payload) {\n        let t = triggers.find(t => t.name === name);\n        return t && new Webhooks().invoke(t, payload);\n    }\n                \n        var payload = body;\n        var projectId = payload.projectId;\n        var cycleId = payload.testcycle;\n        var testLogs = [];\n\n        let testResults = Buffer.from(payload.result, 'base64').toString('ascii');\n\n        //console.log(testResults);\n\n        var parseString = require('xml2js').parseString;\n        var startTime = '';\n        var endTime = '';\n        var lastEndTime = 0;\n\n        parseString(testResults, {\n            preserveChildrenOrder: true,\n            explicitArray: false,\n            explicitChildren: false,\n            emptyTag: \"...\"\n        }, function (err, result) {\n            if (err) {\n                emitEvent('ChatOpsEvent', { Error: \"Unexpected Error Parsing XML Document: \" + err }); \n                console.log(err);\n            } else {              \n                if (result.testsuites) {                    \n                    if (result.testsuites.testsuite) {\n                        var testsuites = Array.isArray(result.testsuites['testsuite']) ? result.testsuites['testsuite'] : [result.testsuites['testsuite']];\n                        testsuites.forEach(function(testsuite) {\n                            lastEndTime = 0;\n                            suiteName = testsuite.$.name;\n                            console.log('Suite Name: ' + suiteName)\n                            if (testsuite.testcase) {\n                                var testcases = Array.isArray(testsuite.testcase) ? testsuite.testcase : [testsuite.testcase];\n                                testcases.forEach(function(testcase) {\n                                    var classArray = [];\n                                    classArray = testcase.$.name.replace('=>', ':').split(':');\n                                    var depth = classArray.length;\n                                    var className = classArray[(depth - 1)];\n                                    var moduleNames = [];\n                                    var moduleCount = 0;\n                                    classArray.forEach(function(folder) {\n                                        if(moduleCount < (depth - 1)) {\n                                            moduleNames.push(folder.trim());\n                                            moduleCount++;\n                                        }\n                                    })\n                                    if (moduleNames.length == 0) {\n                                        moduleNames.push(suiteName);\n                                    }\n                                    console.log('Case Name: ' + className)\n                                    var classStatus = 'passed';\n                                    if (lastEndTime == 0) {\n                                        startTime = new Date(Date.parse(testsuite.$.timestamp)).toISOString();\n                                    } else {\n                                        startTime = lastEndTime;\n                                    }\n                                    interim = new Date(Date.parse(startTime)).getSeconds() + parseFloat(testcase.$.time);\n                                    endTime = new Date(Date.parse(startTime)).setSeconds(interim);\n                                    endTime = new Date(endTime).toISOString();\n\n                                    var note = '';\n                                    var stack = '';\n                                    var testFailure = Array.isArray(testcase.failure) ? testcase.failure : [testcase.failure];\n                                    testFailure.forEach(function(failure) {\n                                        if (failure) {\n                                            console.log(failure.$.type)\n                                            note = failure.$.type + ': ' + failure.$.message;\n                                            console.log(failure._)\n                                            stack = failure._;\n                                            classStatus = 'failed';\n                                        }\n                                    });\n\n                                    var testError = Array.isArray(testcase.error) ? testcase.error : [testcase.error];\n                                    testError.forEach(function(error) {\n                                        if (error) {\n                                            console.log(error.$.message)\n                                            note = error.$.message;\n                                            classStatus = 'failed';\n                                        }\n                                    });\n\n                                    var testSkipped = Array.isArray(testcase.skipped) ? testcase.skipped : [testcase.skipped];\n                                    testSkipped.forEach(function(skipped) {\n                                        if (skipped) {\n                                            classStatus = 'skipped';\n                                        }\n                                    });\n\n                                    console.log(classStatus);\n\n                                    var testLog = {\n                                        status: classStatus,\n                                        name: className,\n                                        attachments: [],\n                                        note: note,\n                                        exe_start_date: startTime,\n                                        exe_end_date: endTime,\n                                        automation_content: htmlEntities(className),\n                                        module_names: moduleNames\n                                    };\n\n                                    if (stack !== '') {\n                                        testLog.attachments.push({\n                                            name: `${className}.txt`,\n                                            data: Buffer.from(stack).toString(\"base64\"),\n                                            content_type: \"text/plain\"\n                                        });\n                                    }\n                                    //testLog.attachments.push(payload.consoleOutput[0]);\n                                    testLogs.push(testLog);\n                                    lastEndTime = endTime;\n                                });\n                            } else {                                \n                                console.log('Test Suite has no Test Cases, skipping.');\n                            }\n                        });\n                    } else {\n                        console.log('Test Suites collection is empty, skipping.');\n                    }\n                } else {\n                    console.log('Test Suites collection doesn\\'t exist, checking for singular test suite.');\n                    var testsuite = result.testsuite;\n\n                    lastEndTime = 0;\n                    suiteName = testsuite.$.name;\n                    console.log('Suite Name: ' + suiteName);\n                    if (testsuite.testcase) {\n                        var testcases = Array.isArray(testsuite.testcase) ? testsuite.testcase : [testsuite.testcase];\n                        testcases.forEach(function(testcase) {\n                            var classArray = [];\n                            classArray = testcase.$.name.replace('=>', ':').split(':');\n                            var depth = classArray.length;\n                            var className = classArray[(depth - 1)];\n                            var moduleNames = [];\n                            var moduleCount = 0;\n                            classArray.forEach(function(folder) {\n                                if(moduleCount < (depth - 1)) {\n                                    moduleNames.push(folder.trim());\n                                    moduleCount++;\n                                }\n                            })\n                            if(moduleNames.length == 0) {\n                                moduleNames.push(suiteName);\n                            }\n                            console.log('Case Name: ' + className)\n                            var classStatus = 'passed';\n                            if(lastEndTime == 0) {\n                                startTime = new Date(Date.parse(testsuite.$.timestamp)).toISOString();\n                            } else {\n                                startTime = lastEndTime;\n                            }\n                            interim = new Date(Date.parse(startTime)).getSeconds() + parseFloat(testcase.$.time);\n                            endTime = new Date(Date.parse(startTime)).setSeconds(interim);\n                            endTime = new Date(endTime).toISOString();\n\n                            var note = '';\n                            var stack = '';\n                            \n                            var testFailure = Array.isArray(testcase.failure) ? testcase.failure : [testcase.failure];\n                            testFailure.forEach(function(failure) {\n                                if (failure) {\n                                    console.log(failure.$.type)\n                                    note = failure.$.type + ': ' + failure.$.message;\n                                    console.log(failure._)\n                                    stack = failure._;\n                                    classStatus = 'failed';\n                                }\n                            });\n\n                            var testError = Array.isArray(testcase.error) ? testcase.error : [testcase.error];\n                            testError.forEach(function(error) {\n                                if (error) {\n                                    console.log(error.$.message)\n                                    note = error.$.message;\n                                    classStatus = 'failed';\n                                }\n                            });\n\n                            var testSkipped = Array.isArray(testcase.skipped) ? testcase.skipped : [testcase.skipped];\n                            testSkipped.forEach(function(skipped) {\n                                if (skipped) {\n                                    classStatus = 'skipped';\n                                }\n                            });\n\n                            console.log(classStatus);\n\n                            var testLog = {\n                                status: classStatus,\n                                name: className,\n                                attachments: [],\n                                note: note,\n                                exe_start_date: startTime,\n                                exe_end_date: endTime,\n                                automation_content: htmlEntities(className),\n                                module_names: moduleNames\n                            };\n                            if (stack !== '') {\n                            testLog.attachments.push({\n                                name: `${className}.txt`,\n                                data: Buffer.from(stack).toString(\"base64\"),\n                                content_type: \"text/plain\"\n                            });\n                            }\n                            //testLog.attachments.push(payload.consoleOutput[0]);\n                            testLogs.push(testLog);\n                            lastEndTime = endTime;\n                        });\n                    } else {\n                        console.log('Test Suite has no Test Cases, skipping.');\n                    }\n                }\n            }   \n        });\n\n        var formattedResults = {\n            \"projectId\" : projectId,\n            \"testcycle\": cycleId,\n            \"logs\" : testLogs\n        };\n\n        emitEvent('UpdateQTestWithFormattedResults', formattedResults );\n\n};\n\nfunction htmlEntities(str) {\n    return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n}"}],"triggers":[{"id":"trigger-1","name":"UpdateQTestWithFormattedResultsEvent"},{"id":"trigger-2","name":"UploadJavaCucumberResults"},{"id":"trigger-3","name":"UploadJavaJUnitResults"},{"id":"trigger-4","name":"ChatOpsEvent"}],"rules":[{"id":"rule-5","name":"UploadJavaJUnitResults","active":false,"triggerId":"trigger-3","actionIds":["action-4"],"tags":[]},{"id":"rule-6","name":"UploadJavaJsonResults","active":false,"triggerId":"trigger-2","actionIds":["action-3"],"tags":[]},{"id":"rule-7","name":"UpdateQTestWithResults","active":false,"triggerId":"trigger-1","actionIds":["action-2"],"tags":[]}]}